alias vi=vim
alias cdgo="cd $HOME/go/src/github.com/airspacetechnologies"
alias tailf='tail -F'

# silence mac zsh warning
export BASH_SILENCE_DEPRECATION_WARNING=1

# golang
export GOPATH="$HOME/go"
export GO111MODULE=on
export GOPRIVATE=github.com/airspacetechnologies/*
export PATH=$GOPATH/bin:$PATH

# colorize all the things
username='\[\033[0;33m\]\u\[\033[0m\]'
host='\[\033[0;32m\]@\h\[\033[0m\]'
pwd='\[\033[0;36m\]\w\[\033[0m\]'
export PS1="$username$host $pwd\$ "
export GREP_OPTIONS='--color=auto'
alias ls="ls -G"

# bash vi mode
set -o vi
bind '"jj": "\e"'

# nvm
export NVM_DIR="$HOME/.nvm"
[ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
[ -s "/usr/local/opt/nvm/etc/bash_completion" ] && . "/usr/local/opt/nvm/etc/bash_completion"  # This loads nvm bash_completion

# docker
alias dc="docker-compose"
alias dcclean="docker-compose down -v --rmi all --remove-orphans"

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/brett/google-cloud-sdk/path.bash.inc' ]; then . '/Users/brett/google-cloud-sdk/path.bash.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/brett/google-cloud-sdk/completion.bash.inc' ]; then . '/Users/brett/google-cloud-sdk/completion.bash.inc'; fi

# github.com/ahmetb/kubectl-aliases
[ -f ~/.kubectl_aliases ] && source ~/.kubectl_aliases
function kubectl() { echo "+ kubectl $@">&2; command kubectl $@; }

# kubectl automcompletion ("brew install bash-completion" first)
[[ -r "/usr/local/etc/profile.d/bash_completion.sh" ]] && . "/usr/local/etc/profile.d/bash_completion.sh"
[ -f ~/.kubectl_autocomplete ] && source ~/.kubectl_autocomplete

# airspace
export RUBYOPT='-W0'
export DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:/usr/local/lib
export PATH="/usr/local/opt/postgresql@12/bin:$PATH"
alias as_go="cd ~/go/src/github.com/airspacetechnologies"
alias carmen="as_go && cd carmen"
alias solicitor="as_go && cd solicitor"
alias albatross="as_go && cd albatross"
alias updoc="pushd ~/src/DockerConfig && docker-compose up -d light-pt-db pt-redis rabbitmq solicitor-db flight-db albatross-db canary-db carmen-redis carmen-db && popd"

function db_restore {
        dropdb firstdelivery -h localhost -U firstdelivery
        createdb firstdelivery -h localhost -U firstdelivery
#        docker exec -i db pg_restore --no-owner -v -d firstdelivery --role firstdelivery -U firstdelivery -Fc $1 -h localhost < $1
	pg_restore --no-owner -d firstdelivery -U firstdelivery -h localhost -Fc $1 -j8
}

function refresh_db {
        aws s3 cp s3://airspace-backups/nightly/light.dump ~/light.dump
        db_restore ~/light.dump
        #rm ~/light.dump
}

[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*

# Setting PATH for Python 3.7
# The original version is saved in .bash_profile.pysave
PATH="/Library/Frameworks/Python.framework/Versions/3.7/bin:${PATH}"
export PATH

export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi
